# MEOW.CUP Bot ‚Äî –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ç—É—Ä–Ω–∏—Ä–∞

import os
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont
import io
import asyncio

API_TOKEN = "7507739946:AAE0p-9CEJWjUM0oXYamsakLvCEvz5KnLJA"
ADMIN_ID = 947800235

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

users = set()
import json

tournaments_file = "tournaments.json"
if os.path.exists(tournaments_file):
    with open(tournaments_file, "r", encoding="utf-8") as f:
        tournaments = json.load(f)
else:
    tournaments = []
photos = {}
ctx = {}

class AddTournament(StatesGroup):
    waiting_photo = State()

class BroadcastState(StatesGroup):
    waiting_content = State()

# –£—Ç–∏–ª–∏—Ç—ã

def get_upcoming_dates():
    today = datetime.now()
    return [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(3)]

def build_keyboard(buttons, row=2):
    builder = InlineKeyboardBuilder()
    for b in buttons:
        builder.button(text=b, callback_data=b)
    builder.adjust(row)
    return builder.as_markup()

def overlay_text_on_image(image_bytes, text):
    image = Image.open(io.BytesIO(image_bytes)).convert("RGBA")
    draw = ImageDraw.Draw(image)
    try:
        font = ImageFont.truetype("arial.ttf", 40)
    except:
        font = ImageFont.load_default()
    width, _ = image.size
    text_width = draw.textlength(text, font=font)
    draw.rectangle([(0, 0), (width, 60)], fill=(0, 0, 0, 180))
    draw.text(((width - text_width) / 2, 10), text, fill="white", font=font)
    output = io.BytesIO()
    image.save(output, format='PNG')
    output.seek(0)
    return output

def cleanup_old():
    today = datetime.now().strftime("%d.%m.%Y")
    global tournaments
    tournaments = [t for t in tournaments if t['date'] >= today]
    with open(tournaments_file, "w", encoding="utf-8") as f:
        json.dump(tournaments, f, ensure_ascii=False, indent=2)

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(F.text == "/start")
async def start_cmd(message: Message):
    ctx[message.from_user.id] = {"step": "start"}
    users.add(message.from_user.id)
    kb = build_keyboard(["—Ç—É—Ä–Ω–∏—Ä", "–∏–≤–µ–Ω—Ç", "–ø—Ä–∞–∫–∏"], row=3)
    pid = photos.get("–º–µ–Ω—é")
    if pid:
        await message.answer_photo(pid, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=kb)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=kb)

@dp.message(F.text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_panel(message: Message):
    ctx[message.from_user.id] = {"step": "admin"}
    if message.from_user.id != ADMIN_ID:
        return
    kb = build_keyboard(["–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∫–Ω–æ–ø–∫–∏", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"])
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@dp.callback_query(F.data == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(call: CallbackQuery):
    await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(len(users)))

@dp.callback_query(F.data == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∫–Ω–æ–ø–∫–∏")
async def ask_photo_upload(call: CallbackQuery):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é = –∫–æ–¥ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00 –∏–ª–∏ '—Ç—É—Ä–Ω–∏—Ä')")

@dp.callback_query(F.data == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(call: CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastState.waiting_content)
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ)")

@dp.message(BroadcastState.waiting_content)
async def handle_broadcast(message: Message, state: FSMContext):
    success = 0
    fail = 0
    all_targets = users.union({message.chat.id})  # –¥–ª—è —á–∞—Ç–æ–≤ —Ç–æ–∂–µ

    for uid in all_targets:
        try:
            if message.photo:
                await bot.send_photo(uid, photo=message.photo[-1].file_id, caption=message.caption or "")
            else:
                await bot.send_message(uid, message.text or "")
            success += 1
        except:
            fail += 1

    await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ {success}, ‚ùå {fail}")
    await state.clear()
    with open(tournaments_file, "w", encoding="utf-8") as f:
        json.dump(tournaments, f, ensure_ascii=False, indent=2)

@dp.message(F.from_user.id == ADMIN_ID, F.photo, F.caption)
async def photo_button_upload(message: Message):
    photos[message.caption.lower()] = message.photo[-1].file_id
    await message.answer("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–¥ –∫–ª—é—á–æ–º: " + message.caption)

class AddTournament(StatesGroup):
    waiting_photo = State()

@dp.callback_query(F.data == "–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä")
async def ask_tournament_data(call: CallbackQuery, state: FSMContext):
    ctx[call.from_user.id]["step"] = "add_tournament"
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–¥–∞—Ç–∞> | <–≤—Ä–µ–º—è> | <—Ç–∏–ø> | <—Å—Ç–∞–¥–∏—è> | <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <—Å—Å—ã–ª–∫–∞>")
    await state.set_state(AddTournament.waiting_photo)

@dp.message(AddTournament.waiting_photo & F.photo)
async def handle_add_tournament(message: Message, state: FSMContext):
    if not message.caption:
        return await message.answer("–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ!")

    parts = [p.strip() for p in message.caption.split("|")]
    if len(parts) != 7:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 7 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ |")

    date, time, type_, stage, title, desc, link = parts
    file = await bot.download(message.photo[-1])
    img = overlay_text_on_image(file.read(), title)
    sent = await bot.send_photo(message.chat.id, photo=img)
    tournaments.append({
        "date": date, "time": time, "type": type_.lower(), "stage": stage,
        "title": title, "desc": desc, "link": link, "photo": sent.photo[-1].file_id
    })
    cleanup_old()
    await message.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª–µ–Ω!")
    cleanup_old()

@dp.message(F.text == "üü¶ –ú–µ–Ω—é")
async def open_main_menu(message: Message):
    kb = build_keyboard(["—Ç—É—Ä–Ω–∏—Ä", "–∏–≤–µ–Ω—Ç", "–ø—Ä–∞–∫–∏"], row=1)
    pid = photos.get("–º–µ–Ω—é")
    await message.answer_photo(pid, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=kb) if pid else await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=kb)

@dp.callback_query()
async def universal_flow(call: CallbackQuery):
    uid = call.from_user.id
    if uid not in ctx:
        ctx[uid] = {}
    uid = call.from_user.id
    data = call.data

    if data in ["—Ç—É—Ä–Ω–∏—Ä", "–∏–≤–µ–Ω—Ç", "–ø—Ä–∞–∫–∏"]:
    ctx[uid] = {"type": data, "step": "type"}
    kb = build_keyboard(get_upcoming_dates(), row=1)
    pid = photos.get(data)

    if pid:
        await call.message.edit_media(InputMediaPhoto(media=pid, caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"), reply_markup=kb)
    else:
        if not hasattr(kb, 'inline_keyboard'):
            kb.inline_keyboard = []
        kb.inline_keyboard.append([InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")])
        try:
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)
        except:
            await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)
            except:
                await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

    elif data in get_upcoming_dates():
        ctx[uid]["date"] = data
        ctx[uid]["step"] = "date"
        kb = build_keyboard(["18:00", "21:00"])
        pid = photos.get(data)
        kb.inline_keyboard.append([InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")])
        await call.message.edit_text("üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb)
            kb.inline_keyboard.append([InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")])
            await call.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb)
        elif step == "date":
            ctx[uid]["step"] = "type"
            kb = build_keyboard(["—Ç—É—Ä–Ω–∏—Ä", "–∏–≤–µ–Ω—Ç", "–ø—Ä–∞–∫–∏"], row=3)
            await call.message.edit_text("üîò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=kb)
        else:
            await open_main_menu(call.message)

async def show_titles(call, uid):
    filters = ctx[uid]
    filtered = [t for t in tournaments if all([
        t['type'] == filters['type'],
        t['date'] == filters['date'],
        t['time'] == filters['time'],
        filters.get('stage') is None or t['stage'] == filters['stage'],
        filters.get('format') is None or t.get('format') == filters['format']
    ])]
    if not filtered:
        await call.message.edit_text("‚ùå –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.", reply_markup=build_keyboard(["‚óÄ –ù–∞–∑–∞–¥"]))
        return
    kb = build_keyboard([t['title'] for t in filtered], row=1)
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")])
    await call.message.edit_text(
        f"üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:

üìå –í—ã –≤—ã–±—Ä–∞–ª–∏:
‚Ä¢ –¢–∏–ø: {ctx[uid].get('type', '-')}
‚Ä¢ –î–∞—Ç–∞: {ctx[uid].get('date', '-')}
‚Ä¢ –í—Ä–µ–º—è: {ctx[uid].get('time', '-')}
‚Ä¢ –°—Ç–∞–¥–∏—è: {ctx[uid].get('stage', '-')}
‚Ä¢ –§–æ—Ä–º–∞—Ç: {ctx[uid].get('format', '-')}",
        reply_markup=kb
    )

@dp.message(F.chat.type.in_(["group", "supergroup"]))
async def handle_group_messages(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π /start –≤ –ª–∏—á–∫–µ üíå")

@dp.message(F.chat.type.in_(["group", "supergroup"]) & F.text == "/—Ç—É—Ä–Ω–∏—Ä")
async def group_add_tournament_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—É—Ä–Ω–∏—Ä –∏–∑ –≥—Ä—É–ø–ø—ã.")
    await state.set_state(AddTournament.waiting_photo)
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–¥–∞—Ç–∞> | <–≤—Ä–µ–º—è> | <—Ç–∏–ø> | <—Å—Ç–∞–¥–∏—è> | <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <—Å—Å—ã–ª–∫–∞>")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    asyncio.run(main())
